#!/bin/bash
set -eo pipefail

# Another way to add smv.py is through the --py-files option passed to
# pyspark, as in `pyspark --py-files $SMV_TOOLS/../python/smv.py`
# Not sure yet which way is best practice.
ALL_TEMPLATES_DIR="${SMV_HOME}/tools/templates"

# PROJ_TYPE:
#  - simple (default)
#  - enterprise
#  - test
PROJ_TYPE="simple"
OVERRIDE=0
DO_GIT_INIT=0


while [[ $# -gt 1 ]]
do
FLAG=$1

  case $FLAG in
    -q)
        QUITE_MODE=1
        shift
        ;;
    -s)
        shift
        ;;
    -d|--dataDir)
        PROJ_DATA_DIR="$2"
        shift
        shift
        ;;
    -n|--name)
        PROJ_NAME="$2"
        shift
        shift
        ;;
    -o)
    OVERRIDE=1
        shift
        ;;
    *)
        ;;
  esac
done

TEMPLATE_DIR="$ALL_TEMPLATES_DIR/$PROJ_TYPE"
TEMPLATE_DATA_DIR="$ALL_TEMPLATES_DIR/data"

if [ $# -ne 1 ]; then
    echo "ERROR: Invalid number of arguments"
    echo "USAGE: $0 [-q][-o] [-d] [-n] project_path"
    echo "project types:"
    echo "  -d: data directory"
    echo "  -n: project name"
    echo
    echo "example:"
    echo "    simple:     \$ ./tools/smv-init /project/path"
    exit 1
fi

PROJ_DIR="$1"
PROJ_SRC_DIR="${PROJ_DIR}/src/main/python"
PROJ_CLASS=""
PROJ_DATA_DIR=${PROJ_DATA_DIR:="${PROJ_DIR}/data"} # default data dir is /data in project dir

function copy_proj_dir()
{
    echo "-- creating project directory"

    if [ -d "$PROJ_DIR" ]; then
      if [ $OVERRIDE -eq 0 ]; then
        echo "   $PROJ_DIR already exists, use the -o flag to authorize override."
        exit 1
      else
        echo "   $PROJ_DIR already exists, converting to SMV project..."
      fi

      # if creating SMV project from existing dir, it must not contain an smv-app-conf.props file
      if [ -f "$PROJ_DIR/conf/smv-app-conf.props" ]; then
        echo "   Error: $PROJ_DIR is already an SMV project. Quitting."
        exit 1
      fi
    fi

    mkdir -p "$PROJ_DIR"
    PROJ_DIR_FULL_PATH=$(cd $PROJ_DIR; /bin/pwd)
    # copy all contents of template (including hidden files)
    cp -r "$TEMPLATE_DIR/." "$PROJ_DIR"
    # .gitignore is named .gitignore.template to prevent influencing git's behavior in SMV repo
    mv "${PROJ_DIR_FULL_PATH}/.gitignore.template" "${PROJ_DIR_FULL_PATH}/.gitignore"
}

function substitute_tokens()
{
    echo "-- substituting tokens with project info"
    echo "-- project directory is: ${PROJ_DIR}"

    local files="$(cd ${PROJ_DIR}; find . -type f -not -name "*.pyc")"
    local files_array=( ${files} )
    local ESCAPED_FULL_PATH=$(echo ${PROJ_DIR_FULL_PATH} | sed -e 's/[\/&]/\\&/g')
    local ESCAPED_DATA_DIR=$(echo ${PROJ_DATA_DIR} | sed -e 's/[\/&]/\\&/g')

    for f in "${files_array[@]}"; do
        sed  -e "s/_GROUP_ID_/$PROJ_GROUP_ID/" \
             -e "s/_ARTIFACT_ID_/$PROJ_ARTIFACT_ID/" \
             -e "s/_PROJ_DIR_FULL_PATH_/${ESCAPED_FULL_PATH}/g" \
             -e "s/_PROJ_NAME_/$PROJ_NAME/g" \
             -e "s/_PROJ_DATA_DIR_/$ESCAPED_DATA_DIR/g" \
             < "$PROJ_DIR/$f" > "$PROJ_DIR/$f.tmp"
        mv "$PROJ_DIR/$f.tmp" "$PROJ_DIR/$f"
    done
}

function create_python_packages()
{
    echo '-- creating python packages'
    for dir in $(ls -d ${PROJ_DIR_FULL_PATH}/src/main/python/*/); do
        find ${dir} -type d -print0 | xargs -0 -I\{\} touch \{\}/__init__.py
    done
}

function create_library_folder()
{
    echo "-- creating library folder"

    cd ${PROJ_DIR_FULL_PATH} && mkdir library
}

function copy_data_files() {
    # integration test project has its own data already in the template
    # other projects share the same data, so it is stored outside of the template
    if [ "$PROJ_TYPE" != "test" ]; then
        echo "-- copying template data"
        cp -r "$TEMPLATE_DATA_DIR" "$PROJ_DIR_FULL_PATH/data"
    fi
}

# --- MAIN ---

copy_proj_dir
substitute_tokens
copy_data_files
create_python_packages
create_library_folder
